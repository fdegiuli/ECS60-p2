==================================== TODO =====================================
+most of insert algorithm for InternalNode is done, but needs to be finished up
+insert root needs to be coded
+splitting code = the one from leafnode. Needs to be amended.
+testing testing testing

=================================== Notes =====================================

##TA's notes in pseudocode/C++

Root = new leafnode(LSize, NULL, ... )
Check count < size
  if not
    if(leftSibling && leftSibling->getCount > leafSize)
      addtoLeft(value);
    else if (rightSibling && rightSibling->getCount < leafSize)
      adddtoRight(value)
    else
      split();

addtLeft
  leftSibling->insert(values[0])
  for(each element in left sibling)
    value[i] = value[i - 1]
    value[count - 1] = last

LeafNode *n = newleaf(size, parent, this, rightSibling, NULL)

for(int = (leafSize + 1)/2; i < leafSize; i++)
// to make sure half full
// insert new values here

###Problem: silll need to update LeafNode keys after this; apparently causes seg faults

###If you want to promote the leftSibling, must do the following cast
  // (InternalNode*)leftSibling

###To inform root of change, make new member function
LeafNode*______
  if(return value)
  {
    InternalNode node = new(..., ..., ...)
    node->insert(return value)
  }

void InternalNode insert(BTreeNode *old Root, BTree, n)
  children[v] = oldroot
  children[1] = rv
  key[0] = oldroot->min
  key[1] = rv->min

###EOF